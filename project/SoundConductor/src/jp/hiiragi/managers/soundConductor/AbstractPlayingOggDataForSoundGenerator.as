package jp.hiiragi.managers.soundConductor
{
	import com.jac.ogg.OggManager;

	import flash.display.Shape;
	import flash.events.Event;
	import flash.utils.ByteArray;

	import jp.hiiragi.managers.soundConductor.error.SoundConductorError;
	import jp.hiiragi.managers.soundConductor.error.SoundConductorErrorType;

//--------------------------------------
//  Events
//--------------------------------------

//--------------------------------------
//  Styles
//--------------------------------------

//--------------------------------------
//  Other metadata
//--------------------------------------

	public class AbstractPlayingOggDataForSoundGenerator extends AbstractPlayingDataForSoundGenerator
	{
//--------------------------------------------------------------------------
//
//  Class constants
//
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Class variables
//
//--------------------------------------------------------------------------
		//----------------------------------
		//  valiableName
		//----------------------------------

//--------------------------------------------------------------------------
//
//  Class properties
//
//--------------------------------------------------------------------------
		//----------------------------------
		//  propertyName
		//----------------------------------

//--------------------------------------------------------------------------
//
//  Class Service methods
//
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Class Namespace methods
//
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Class Public methods
//
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Class Internal methods
//
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Class Protected methods
//
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Class Private methods
//
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Class Event handlers
//
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Constructor
//
//--------------------------------------------------------------------------
		public function AbstractPlayingOggDataForSoundGenerator(playInfo:SoundPlayInfo, registeredSoundData:RegisteredSoundData, soundGroupController:SoundGroupController)
		{
			if (this["constructor"] != AbstractPlayingOggDataForSoundGenerator)
			{
				super(playInfo, registeredSoundData, soundGroupController);

				_oggManager = new OggManager();
				_oggManager.initDecoder(registeredSoundData.soundByteArray);

				_tempBuffer = new ByteArray();
				totalLength = Math.floor(SoundUtil.calcurateOggLength(registeredSoundData.soundByteArray, _oggManager.audioInfo.sampleRate) / SoundUtil.COEFFICIENT_OF_CONVERT_FROM_MS_TO_BYTE);
				soundByteArray = new ByteArray();

				for (var i:int = 0; i < 30; i++)
				{
					writeDecodedSampleData();
				}

				_ticker = new Shape();
				_ticker.addEventListener(Event.ENTER_FRAME, onEnterFrameHandler);
			}
			else
			{
				throw new SoundConductorError(SoundConductorErrorType.ERROR_10000);
			}
		}

		private var _tempBuffer:ByteArray;

		protected function onEnterFrameHandler(event:Event):void
		{
			writeDecodedSampleData();
		}

		private function writeDecodedSampleData():void
		{
			_tempBuffer.length = 0;
			var result:Object = _oggManager.getSampleData(4096, _tempBuffer);

			if (_tempBuffer.length > 0)
			{
				var offset:int = soundByteArray.length == 0 ? 0 : soundByteArray.length - 1;
				soundByteArray.writeBytes(_tempBuffer);
			}
			else
			{
				_ticker.removeEventListener(Event.ENTER_FRAME, onEnterFrameHandler);
			}
		}

//--------------------------------------------------------------------------
//
//  Variables
//
//--------------------------------------------------------------------------
		//----------------------------------
		//  valiableName
		//----------------------------------
		private var _oggManager:OggManager;

		private var _ticker:Shape;

//--------------------------------------------------------------------------
//
//  Overridden properties
//
//--------------------------------------------------------------------------
		//----------------------------------
		//  propertyName
		//----------------------------------

//--------------------------------------------------------------------------
//
//  Properties
//
//--------------------------------------------------------------------------
		//----------------------------------
		//  propertyName
		//----------------------------------

//--------------------------------------------------------------------------
//
//  Overridden methods
//
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Service methods
//
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Namespace methods
//
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Public methods
//
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Internal methods
//
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Protected methods
//
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Private methods
//
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Overridden Event handlers
//
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Event handlers
//
//--------------------------------------------------------------------------

	}
}



////////////////////////////////////////////////////////////////////////////////
//
//  Helper class: ClassName
//
////////////////////////////////////////////////////////////////////////////////
