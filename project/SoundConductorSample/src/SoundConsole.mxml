<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="180">
	
	<s:layout>
		<s:VerticalLayout gap="5" />
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import jp.hiiragi.managers.soundConductor.SoundConductor;
			import jp.hiiragi.managers.soundConductor.SoundController;
			import jp.hiiragi.managers.soundConductor.SoundPlayInfo;
			import jp.hiiragi.managers.soundConductor.constants.SoundPlayType;
			import jp.hiiragi.managers.soundConductor.constants.SoundStatusType;
			import jp.hiiragi.managers.soundConductor.events.SoundConductorEvent;
			
			private var _playInfo:SoundPlayInfo;

			public function get playInfo():SoundPlayInfo
			{
				return _playInfo;
			}

			public function set playInfo(value:SoundPlayInfo):void
			{
				_playInfo = value;
				setLoopTime();
			}

			public var typeFilter:FileFilter;
			
			private var _soundController:SoundController;
			
			
			
			
			
			private function muteCheckBox_changeHandler(event:Event):void
			{
				if (_soundController != null)
				{
					if (_soundController.isMute)
					{
						_soundController.unmute();
					}
					else
					{
						_soundController.mute();
					}
				}
			}
			
			private function volumeSlider_changeHandler(event:Event):void
			{
				if (_soundController != null)
				{
					_soundController.setVolume(volumeSlider.value);
				}
			}
			
			private function playButtonClickHandler(event:MouseEvent):void
			{
				if (_soundController == null)
				{		
					if (soundPlayTypeRadioButtonGroup.selectedValue == SoundPlayType.SINGLE_SOUND_GENERATOR.value)
					{
						playInfo.soundPlayType = SoundPlayType.SINGLE_SOUND_GENERATOR;
					}
					else if (soundPlayTypeRadioButtonGroup.selectedValue == SoundPlayType.SHARED_SOUND_GENERATOR.value)
					{
						playInfo.soundPlayType = SoundPlayType.SHARED_SOUND_GENERATOR;
					}
					else
					{
						playInfo.soundPlayType = SoundPlayType.NORMAL_SOUND_ARCHITECT;
					}
					
					playInfo.volume = volumeSlider.value;
					playInfo.loops = loopNumericStepper.value;
					
					_soundController = SoundConductor.play(playInfo, fadeInTimeNumericStepper.value);
					seekSlider.minimum = 0;
					seekSlider.maximum = _soundController.totalLength;
					
					_soundController.addEventListener(SoundConductorEvent.STOPPED, onLoopCompleteHandler);
					addEventListener(Event.ENTER_FRAME, onEnterFrameHandler);
					
					
					switchComponentsEnabled(false);
				}
			}
			
			private function stopButtonClickHandler(event:MouseEvent):void
			{
				stop();
			}
			
			private function onEnterFrameHandler(event:Event):void
			{
				seekSlider.value = _soundController.currentPosition;
			}
			
			private function stop():void
			{
				if (_soundController != null)
				{
					removeEventListener(Event.ENTER_FRAME, onEnterFrameHandler);
					
					_soundController.removeEventListener(SoundConductorEvent.STOPPED, onLoopCompleteHandler);
					
					if (_soundController.status == SoundStatusType.STOPPED)
					{
						finalize();
					}
					else
					{
						_soundController.addEventListener(SoundConductorEvent.STOPPED, onStopCompleteHandler);
						_soundController.stop(fadeOutTimeNumericStepper.value);
					}

				}
				
				function onStopCompleteHandler(event:SoundConductorEvent):void
				{
					_soundController.removeEventListener(SoundConductorEvent.STOPPED, onStopCompleteHandler);
					finalize();
				}
				function finalize():void
				{
					_soundController = null;
					
					switchComponentsEnabled(true);
				}
			}
			
			private function onLoopCompleteHandler(event:Event):void
			{
				stop();
			}
			
			private function pauseButtonClickHandler(event:MouseEvent):void
			{
				if (_soundController != null)
				{
					_soundController.pause(fadeOutTimeNumericStepper.value);
					pauseButton.enabled = false;
					resumeButton.enabled = true;
				}
			}
			
			private function resumeButtonClickHandler(event:MouseEvent):void
			{
				if (_soundController != null)
				{
					_soundController.resume(fadeInTimeNumericStepper.value);
					pauseButton.enabled = true;
					resumeButton.enabled = false;
				}

			}
			
			private function loadSoundFileButton_clickHandler(event:MouseEvent):void
			{
				browseSoundFile();
			}
			
			protected function browseSoundFile():void
			{
				if (typeFilter != null)
				{
					var that:SoundConsole = this;
					var fileReference:FileReference = new FileReference();
					fileReference.addEventListener(Event.SELECT, onSelectHandler);
					fileReference.addEventListener(Event.COMPLETE, onCompleteHandler);
					fileReference.addEventListener(Event.CANCEL, onCancelHandler);
					fileReference.browse([typeFilter]);
				}
				
				function onSelectHandler(event:Event):void
				{
					that.enabled = false;
					fileReference.load();
				}
				function onCompleteHandler(event:Event):void
				{
					finalize();
					externalFileLoadCompleted(fileReference.data);
					setLoopTime();
				}
				function onCancelHandler(event:Event):void
				{
					finalize();
				}
				function finalize():void
				{
					that.enabled = true;
					fileReference.removeEventListener(Event.SELECT, onSelectHandler);
					fileReference.removeEventListener(Event.COMPLETE, onCompleteHandler);
					fileReference.removeEventListener(Event.CANCEL, onCancelHandler);
				}
				
			}
			
			protected function externalFileLoadCompleted(data:ByteArray):void
			{
				
			}
			
			private function setLoopTime():void
			{
				loopStartTimeByMSNumericStepper.value = _playInfo.loopStartTimeByMS;
				loopEndTimeByMSNumericStepper.value = _playInfo.loopEndTimeByMS;
			}
			
			private function switchComponentsEnabled(enabled:Boolean):void
			{
				playButton.enabled = enabled;
				pauseButton.enabled = !enabled;
				stopButton.enabled = !enabled;
				loadSoundFileButton.enabled = enabled;
				loopNumericStepper.enabled = enabled;
				loopStartTimeByMSNumericStepper.enabled = enabled;
				loopEndTimeByMSNumericStepper.enabled = enabled;
				soundPlayTypeRadioButtonGroup.enabled = enabled;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:RadioButtonGroup id="soundPlayTypeRadioButtonGroup" />
	</fx:Declarations>
	
	<s:HGroup padding="10" verticalAlign="middle">
		<s:HSlider id="seekSlider" width="200" />
		<s:Button label="play" id="playButton" click="playButtonClickHandler(event)" />
		<s:Button label="pause" id="pauseButton" click="pauseButtonClickHandler(event)" enabled="false" />
		<s:Button label="resume" id="resumeButton" click="resumeButtonClickHandler(event)" enabled="false" />
		<s:Button label="stop" id="stopButton" click="stopButtonClickHandler(event)" enabled="false" />
		<s:Label text="volume"/>
		<s:HSlider id="volumeSlider" minimum="0" maximum="1" stepSize="0.01" value="1"
				   width="200" change="volumeSlider_changeHandler(event)" />
		<s:CheckBox id="muteCheckBox" label="mute" change="muteCheckBox_changeHandler(event)" />
		<s:Button label="load..." id="loadSoundFileButton" click="loadSoundFileButton_clickHandler(event)" />
	</s:HGroup>
	
	<s:HGroup>
		<s:VGroup width="300">
			<s:RadioButton id="normalSoundArchitectRadioButton" group="{soundPlayTypeRadioButtonGroup}" label="{SoundPlayType.NORMAL_SOUND_ARCHITECT.value}" selected="true" />
			<s:RadioButton id="singleSoundGeneratorRadioButton" group="{soundPlayTypeRadioButtonGroup}" label="{SoundPlayType.SINGLE_SOUND_GENERATOR.value}" />
			<s:RadioButton id="sharedSoundGeneratorRadioButton" group="{soundPlayTypeRadioButtonGroup}" label="{SoundPlayType.SHARED_SOUND_GENERATOR.value}" />
		</s:VGroup>
		
		<s:VGroup width="300">
			<s:HGroup verticalAlign="middle">
				<s:Label text="fadeInTimeByMS" />
				<s:NumericStepper id="fadeInTimeNumericStepper" minimum="0" maximum="5000" value="0" />
			</s:HGroup>
			<s:HGroup verticalAlign="middle">
				<s:Label text="fadeOutTimeByMS" />
				<s:NumericStepper id="fadeOutTimeNumericStepper" minimum="0" maximum="5000" value="0" />
			</s:HGroup>
		</s:VGroup>

		<s:VGroup>
			<s:HGroup verticalAlign="middle">
				<s:Label text="loops( -1 is inifinite loop )" />
				<s:NumericStepper id="loopNumericStepper" minimum="-1" maximum="{int.MAX_VALUE}" value="-1" />
			</s:HGroup>
			<s:HGroup verticalAlign="middle">
				<s:Label text="loopStartTimeByMS" />
				<s:NumericStepper id="loopStartTimeByMSNumericStepper" minimum="0" maximum="{int.MAX_VALUE}" value="0" />
			</s:HGroup>
			<s:HGroup verticalAlign="middle">
				<s:Label text="loopEndTimeByMS" />
				<s:NumericStepper id="loopEndTimeByMSNumericStepper" minimum="0" maximum="{int.MAX_VALUE}" value="0" />
			</s:HGroup>
		</s:VGroup>
	</s:HGroup>


	
</s:Panel>